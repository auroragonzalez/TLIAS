setwd("~/Desktop/Git_repos/postdoc/estanciaERAU/bibliografia/HVAC/study1/Re_ otro trabajo + Re_ shiny server y skype")
library(lattice)
library(ggplot2)
library(caret)
library(reshape2)
library(stats)
library(plyr)
library(gbm)
library(pROC)
library(compare)
library(dplyr)
library(xts)
library(lubridate)
library("data.table")
# Leemos los datos del repositorio
link = "https://bitbucket.org/aurorax/datangi/raw/162a9cc53e77c6dab67d88e6807b2160c262d1db/LANGEVIN_DATA.txt"
df = fread(link)
# Se crea una copia de los datos y se añade una nueva columna indicando el numero de fila
n <- 1:nrow(df)
df1 <- cbind(n, df)
names(df1$n) <- "N"
trabajadores <- 24
# Funcion que devuelve true si una fila es nula entera (invalida)
isRowNaN <- function(x){
for (i in x) {
if(!is.na(i))
return (FALSE)
}
return (TRUE)
}
# Seleccionamos las columnas que contienen las informacion y eliminamos filas repetidas
infoPersonal <- df1[,c(28,27,29:37)]
info <- distinct(infoPersonal)
info
# Eliminasmos las filas nulas completamente pues no nos aportan ningun tipo de informacion
resultado <- NULL
for (j in 1:nrow(info)) {
if(!isRowNaN(info[j,]))
resultado <- rbind(resultado, info[j,])
}
# Damos nombre a las columnas
names(resultado) <- c("Age", "Gender", "Off. Type", "Floor", "Loc. on floor", "Min. sensation summer", "Min. sensation winter", "Med. range summer", "Med. range winter", "Max. sensation summer", "Max. sensation winter")
resultado
write.table(resultado, "./InformacionPersonal.csv", row.names = FALSE, na = "NA", col.names = TRUE, sep = ",", dec = ".")
library(lattice)
library(ggplot2)
library(reshape2)
library(stats)
library(plyr)
library(dplyr)
library(xts)
library(lubridate)
library("data.table")
df = fread(link)
# Se crea una copia de los datos y se añade una nueva columna indicando el numero de fila
n <- 1:nrow(df)
df1 <- cbind(n, df)
names(df1$n) <- "N"
trabajadores <- 24
# Funcion que devuelve true si una fila es nula entera (invalida)
isRowNaN <- function(x){
for (i in x) {
if(!is.na(i))
return (FALSE)
}
return (TRUE)
}
# Seleccionamos las columnas que contienen las informacion y eliminamos filas repetidas
infoPersonal <- df1[,c(28,27,29:37)]
info <- distinct(infoPersonal)
info
# Eliminasmos las filas nulas completamente pues no nos aportan ningun tipo de informacion
resultado <- NULL
for (j in 1:nrow(info)) {
if(!isRowNaN(info[j,]))
resultado <- rbind(resultado, info[j,])
}
# Damos nombre a las columnas
names(resultado) <- c("Age", "Gender", "Off. Type", "Floor", "Loc. on floor", "Min. sensation summer", "Min. sensation winter", "Med. range summer", "Med. range winter", "Max. sensation summer", "Max. sensation winter")
resultado
write.table(resultado, "./InformacionPersonal.csv", row.names = FALSE, na = "NA", col.names = TRUE, sep = ",", dec = ".")
library(lattice)
library(ggplot2)
library(reshape2)
library(stats)
library(plyr)
library(dplyr)
library(xts)
library(lubridate)
library("data.table")
n <- 1:nrow(df)
df1 <- cbind(n, df)
names(df1$n) <- "N"
trabajadores <- 24
# Funcion que devuelve true si una fila es nula entera (invalida)
isRowNaN <- function(x){
for (i in x) {
if(!is.na(i))
return (FALSE)
}
return (TRUE)
}
# Extraemos informacion relativa a las oficinas y eliminamos informacion repetida
infoOficina <- df1[,c(3,29:31)]
infoOficina <- distinct(infoOficina)
infoOficina
# Eliminamos las filas nulas completamente pues no nos aportan ningun tipo de informacion
res <- NULL
for (j in 1:nrow(infoOficina)) {
if(!isRowNaN(infoOficina[j,2:4]))
res <- rbind(res, infoOficina[j,])
}
res
# Ordenamos la infromacion para poder contar el numero de empleados por oficina
res <- res[with(res, order(res$V28, res$V29, res$V30)),]
res
# Agrupamos los trabajadores que trabajan en el mismo lugar en una lista
agrupacion <- group_by(res,res$V28, res$V29, res$V30) %>% group_rows()
agrupacion
# Calculamos el numero de sedes sin repeticiones de los trabajadores
sedes <- distinct(res[,2:4])
names(sedes) <- c("Off. Type", "Floor", "Loc. on floor")
sedes
# Para cada sede, creamos una tabla en la que se indica el numero de trabajadores actuales que estan en ella
aux2 <- NULL
for (i in 1:length(agrupacion)) {
aux2[i] <- length(agrupacion[[i]])
}
# Damos formato a la tabla
aux2 <- data.frame(aux2)
names(aux2) <- c("Workers")
aux2
resultado <- cbind(sedes, aux2)
write.table(resultado, "./InformacionOficinas.csv", row.names = FALSE, na = "NA", col.names = TRUE, sep = ";", dec = ".")
library(lattice)
library(ggplot2)
library(reshape2)
library(stats)
library(plyr)
library(dplyr)
library(xts)
library(lubridate)
library("data.table")
# Leemos los datos del repositorio
link = "https://bitbucket.org/aurorax/datangi/raw/162a9cc53e77c6dab67d88e6807b2160c262d1db/LANGEVIN_DATA.txt"
df = fread(link)
# Se crea una copia de los datos y se añade una nueva columna indicando el numero de fila
n <- 1:nrow(df)
df1 <- cbind(n, df)
names(df1$n) <- "N"
trabajadores <- 24
# Funcion auxiliar para hacer resampling por horas de las variables continuas
resample.dates <- function(x, FUN, units= "hours",...) {
ep <- endpoints(x, units)
x <- period.apply(x, ep, FUN, ...)
index(x) <- round_date(index(x),unit = units)
return (x)
}
# Contruimos un vector de fechas para hacer resampling
dates <- seq(ymd_hm('2013-07-01 00:00'), ymd_hm('2014-07-01 00:00'), by = '15 mins')
dates
# Contruimos un vector con las horas para la columna de timestamp
# hours <- data.frame(seq(ymd_hm('2013-07-01 00:00'), ymd_hm('2014-07-01 00:00'), by = '1 h'))
# hours
# Funcion que devuelve un vector con el timestamp para el resampling
ciclos <- function(maximo){
aux <- NULL
num <- 1
while(num <= maximo){
aux <- rbind(aux, df1$V1[num])
num <- num+4
}
return (aux)
}
tiempo <- ciclos(nrow(df1)/trabajadores)
# Para cada trabajador hacemos resampling de las variables continuas y se guardan en un fichero (formato: Timestamp + variables continuas por horas)
for (i in 1:trabajadores) {
filtroPersonas <- filter(df1, df1$V2 == i)        # Filtramos las filas de cada trabajador (variable V2 determina el trabajador)
varCont <- filtroPersonas[,c(7:19,60:63,67,119)]  # Nos quedamos con las columnas de las variables continuas
# Resampling datos
data.xts <- xts(varCont, dates, tzone = Sys.getenv("TZ"))
resamp <- resample.dates(data.xts, mean, units = "hours")
# Creamos el dataframe con el timestamp y los valores de las variables continuas
resultado <- data.frame(tiempo, resamp)
names(resultado)[1] <- c("Timestamp")
write.table(resultado, paste("./Trabajador",i,".csv", sep = ""), row.names = FALSE, na = "NA", col.names = TRUE, sep = ";", dec = ".")
}
